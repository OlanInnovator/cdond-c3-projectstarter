version: 2.1

orbs:
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1
  
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    #  when_to_run:
     #   type: string
     #   default: "on_fail"  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.Workflow_ID >> "
            aws --region us-west-1 s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws --region us-west-1 cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws --region us-west-1 cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
              SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET_ID}/migration_<< parameters.Workflow_ID >>)
              # Logic for reverting the database state
              if (( $SUCCESS == 1 ));
              then
                cd ~/project/backend
                npm install
                npm run migration:revert
              fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend 
            npm install 
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend 
            npm install 
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: back-end test
          command: |
            cd backend
            npm install
            npm run test        
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            npm install --save-dev postcss-import@15.1.0 
            npm install --save-dev postcss-reporter@7.0.5
            npm install --save-dev postcss-loader@7.3.3
            npm install --save-dev postcss-url@10.1.3
            npm update js-yaml --depth 4
            npm update minimist --depth 4 
            npm update loader-utils --depth 2
            npm update semver --depth 4 
            npm update json5 --depth 3 
            npm update postcss-preset-env --depth 1 
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1
          
  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1
          
  deploy-infrastructure:
    docker:
      - image : amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar and zip utilities
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"        
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
          
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt            
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      
  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine #cimg/base:stable 
      # python:3.11-rc-alpine #cimg/aws:2023.09
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      - checkout
     # - install_ansible 
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: 
              - "6d:7d:de:2c:7b:7b:f9:08:d5:7e:03:d0:6e:19:09:9a"
            #  - "d1:f8:e4:06:cc:e9:11:93:35:9b:50:62:61:91:94:63"
            # - "d5:0c:dd:15:e8:7a:da:a2:0b:e3:84:b0:7a:64:5a:ff"
      # attach workspace
      - attach_workspace:
          at: ~/ 
      - run:
            name: Install tar and gzip
            command: |
              apk add --no-cache tar gzip
      - run:
            name: Install ansible
            command: |
              apk add --update ansible
      - run:
            name: Install aws cli
            command: |
              pip install awscli
      - run:
            name: Run Playbook and Configure server
            command: |
              cd .circleci/ansible
              cat inventory.txt
              ansible-playbook -i inventory.txt -vvv configure-server.yml
      - destroy-environment
  run-migrations:
    docker: 
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
            keys: [backend-build]
      - run:
          name: Run migrations
          command: |
           # Your code here
           cd backend
           npm install
           # npm audit fix --force
           npm run migrations > migrations_dump.txt            
      - run:
          name: Send migration results to memstash
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                echo "insecure" >> ~/.curlrc
                echo "insecure"
                curl https://kvdb.io/GjRuSz7etqxEz49MvTpbWF/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                echo "https://kvdb.io/GjRuSz7etqxEz49MvTpbWF/migration_${CIRCLE_WORKFLOW_ID:0:7}"        
              # fi

                  # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                  # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                  # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                  # curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
     # Here's where you will add some code to rollback on failure
      - revert-migrations  
      - destroy-environment
 
 
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
         requires: [build-backend]
      #- scan-frontend:
       #  requires: [build-frontend] 
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-backend] #, scan-frontend
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
           requires: [configure-infrastructure]
